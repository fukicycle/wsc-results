@inject HttpClient _http
<div class="main-area">
    <div class="chart-filter-area">
        <div class="filter-item">
            <div>Competition:</div>
            <select @bind="_eventId">
                <option value="0">-</option>
                @if (_eventRoot.Events is not null)
                {
                    @foreach (var item in _eventRoot.Events)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                }
            </select>
        </div>
        <div class="filter-item">
            <div>Member:</div>
            <select @bind="_memberId">
                @if (_memberRoot.Members is not null)
                {
                    @foreach (var item in _memberRoot.Members)
                    {
                        <option value="@item.Id">@item.Name.Text</option>
                    }
                }
            </select>
        </div>
        <div class="filter-item">
            <div>Skill:</div>
            <select @bind="_skillId">
                <option value="0">-</option>
                @if (_skillRoot.BaseSkills is not null)
                {
                    @foreach (var item in _skillRoot.BaseSkills)
                    {
                        <option value="@item.Id">@item.Name.Text</option>
                    }
                }
            </select>
        </div>
        <button class="filter-item btn btn-primary" @onclick="SearchButtonOnClick">Search</button>
    </div>
    @if (_resultRoot?.Results is not null)
    {
        <div class="chart-area">
            <div class="chart-content">
                <div>Graph by tournament in @_member</div>
                <div class="chart">
                    <Chart Config="_barConfig1"></Chart>
                </div>
            </div>
            <div class="chart-content">
                <div>Graph by skill in @_member</div>
                <div class="chart">
                    <Chart Config="_barConfig2"></Chart>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="loading">
            <div class="text-center">
                <div class="spinner-border"></div>
                <div>Getting data...</div>
            </div>
        </div>
    }
</div>

@code {
    private Root _resultRoot = new Root();
    private EventRoot _eventRoot = new EventRoot();
    private SkillRoot _skillRoot = new SkillRoot();
    private MemberRoot _memberRoot = new MemberRoot();
    private BarConfig _barConfig1 = null!;
    private BarConfig _barConfig2 = null!;
    private readonly int MAX_LIMIT = int.MaxValue;

    private int _eventId = 0;
    private int _memberId = 14;
    private int _skillId = 0;
    private string _member = "Japan";

    protected override async Task OnInitializedAsync()
    {
        _resultRoot = await _http.GetFromJsonAsync<Root>($"?offset=0&limit={MAX_LIMIT}&sort=event_desc&member=14") ?? new Root();
        _eventRoot = await _http.GetFromJsonAsync<EventRoot>("events") ?? new EventRoot();
        _skillRoot = await _http.GetFromJsonAsync<SkillRoot>("base_skills?entity=1&l=en") ?? new SkillRoot();
        _memberRoot = await _http.GetFromJsonAsync<MemberRoot>("members?l=en") ?? new MemberRoot();
        _barConfig1 = new BarConfig()
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Index,
                        Intersect = false
                    },
                    Scales = new BarScales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Stacked = true
                        }
                    }
                    }
                }
            };
        _barConfig2 = new BarConfig()
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Index,
                        Intersect = false
                    },
                    Scales = new BarScales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Stacked = true
                        }
                    }
                    }
                }
            };
        Refresh();
    }


    private async Task SearchButtonOnClick()
    {
        if (_memberId != 0 && _eventId != 0 && _skillId != 0)
            _resultRoot = await _http.GetFromJsonAsync<Root>($"?offset=0&limit={MAX_LIMIT}&sort=event_desc&member={_memberId}&event={_eventId}&skill_base_id={_skillId}") ?? new Root();
        else if (_memberId != 0 && _eventId != 0)
            _resultRoot = await _http.GetFromJsonAsync<Root>($"?offset=0&limit={MAX_LIMIT}&sort=event_desc&member={_memberId}&event={_eventId}") ?? new Root();
        else if (_memberId != 0 && _skillId != 0)
            _resultRoot = await _http.GetFromJsonAsync<Root>($"?offset=0&limit={MAX_LIMIT}&sort=event_desc&member={_memberId}&skill_base_id={_skillId}") ?? new Root();
        else if (_eventId != 0 && _skillId != 0)
            _resultRoot = await _http.GetFromJsonAsync<Root>($"?offset=0&limit={MAX_LIMIT}&sort=event_desc&event={_eventId}&skill_base_id={_skillId}") ?? new Root();
        else if (_memberId != 0)
            _resultRoot = await _http.GetFromJsonAsync<Root>($"?offset=0&limit={MAX_LIMIT}&sort=event_desc&member={_memberId}") ?? new Root();
        else if (_eventId != 0)
            _resultRoot = await _http.GetFromJsonAsync<Root>($"?offset=0&limit={MAX_LIMIT}&sort=event_desc&event={_eventId}") ?? new Root();
        else if (_skillId != 0)
            _resultRoot = await _http.GetFromJsonAsync<Root>($"?offset=0&limit={MAX_LIMIT}&sort=event_desc&skill_base_id={_skillId}") ?? new Root();
        _member = _memberRoot.Members.First(a => a.Id == _memberId).Name.Text;
        Refresh();
    }

    private void Refresh()
    {
        CreateBarChart1();
        CreateBarChart2();
    }

    private void CreateBarChart1()
    {
        _barConfig1.Data.Datasets.Clear();
        _barConfig1.Data.Labels.Clear();
        List<int> gold = new List<int>();
        List<int> silver = new List<int>();
        List<int> bronze = new List<int>();
        List<int> mfe = new List<int>();
        List<int> other = new List<int>();
        _resultRoot.Results.GroupBy(a => a.Skill.Event.Code).Select(a => new
        {
            Event = a.Key,
            Medals = a
        }).ToList().ForEach(@event =>
        {
            _barConfig1.Data.Labels.Add(@event.Event);
            gold.Add(@event.Medals.Count(a => a.Medal?.Code == "GOLD"));
            silver.Add(@event.Medals.Count(a => a.Medal?.Code == "SILVER"));
            bronze.Add(@event.Medals.Count(a => a.Medal?.Code == "BRONZE"));
            mfe.Add(@event.Medals.Count(a => a.Medal?.Code == "MFE"));
            other.Add(@event.Medals.Count(a => a.Medal is null || a.Medal.Code == null));
        });
        IDataset<int> goldData = new BarDataset<int>(gold)
            {
                Label = "Gold",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gold)
            };

        IDataset<int> silverData = new BarDataset<int>(silver)
            {
                Label = "Silver",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Silver)
            };

        IDataset<int> bronzeData = new BarDataset<int>(bronze)
            {
                Label = "Bronze",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Brown)
            };
        IDataset<int> mfeData = new BarDataset<int>(mfe)
            {
                Label = "Medallion for Excellence",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Chocolate)
            };
        IDataset<int> otherData = new BarDataset<int>(other)
            {
                Label = "Other",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gray)
            };
        _barConfig1.Data.Datasets.Add(goldData);
        _barConfig1.Data.Datasets.Add(silverData);
        _barConfig1.Data.Datasets.Add(bronzeData);
        _barConfig1.Data.Datasets.Add(mfeData);
        _barConfig1.Data.Datasets.Add(otherData);
    }

    private void CreateBarChart2()
    {
        _barConfig2.Data.Datasets.Clear();
        _barConfig2.Data.Labels.Clear();
        List<int> gold = new List<int>();
        List<int> silver = new List<int>();
        List<int> bronze = new List<int>();
        List<int> mfe = new List<int>();
        List<int> other = new List<int>();
        _resultRoot.Results.GroupBy(a => a.Skill.Name.Text).Select(a => new
        {
            Skill = a.Key,
            Medals = a
        }).ToList().ForEach(skill =>
        {
            _barConfig2.Data.Labels.Add(skill.Skill);
            gold.Add(skill.Medals.Count(a => a.Medal?.Code == "GOLD"));
            silver.Add(skill.Medals.Count(a => a.Medal?.Code == "SILVER"));
            bronze.Add(skill.Medals.Count(a => a.Medal?.Code == "BRONZE"));
            mfe.Add(skill.Medals.Count(a => a.Medal?.Code == "MFE"));
            other.Add(skill.Medals.Count(a => a.Medal is null || a.Medal.Code == null));
        });
        IDataset<int> goldData = new BarDataset<int>(gold)
            {
                Label = "Gold",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gold)
            };

        IDataset<int> silverData = new BarDataset<int>(silver)
            {
                Label = "Silver",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Silver)
            };

        IDataset<int> bronzeData = new BarDataset<int>(bronze)
            {
                Label = "Bronze",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Brown)
            };
        IDataset<int> mfeData = new BarDataset<int>(mfe)
            {
                Label = "Medallion for Excellence",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Chocolate)
            };
        IDataset<int> otherData = new BarDataset<int>(other)
            {
                Label = "Other",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gray)
            };
        _barConfig2.Data.Datasets.Add(goldData);
        _barConfig2.Data.Datasets.Add(silverData);
        _barConfig2.Data.Datasets.Add(bronzeData);
        _barConfig2.Data.Datasets.Add(mfeData);
        _barConfig2.Data.Datasets.Add(otherData);
    }
}
