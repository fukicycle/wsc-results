@inject HttpClient _http
<div class="main-area">
    @if (_resultRoot?.Results is not null)
    {
        <Chart Config="_config" @ref="_chart"></Chart>
    }
    else
    {
        <div class="text-center">
            <div class="loading spinner-border"></div>
            <div>Getting data...</div>
        </div>
    }
</div>

@code {
    private Root _resultRoot = new Root();
    private BarConfig _config = null!;
    private Chart _chart = null!;

    protected override async Task OnInitializedAsync()
    {
        _resultRoot = await _http.GetFromJsonAsync<Root>("?offset=0&limit=30000&sort=event_desc&l=en-US") ?? new Root();

        _config = new BarConfig()
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "World skills results of Japan"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Index,
                        Intersect = false
                    },
                    Scales = new BarScales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Stacked = true
                        }
                    }
                    }
                }
            };
        List<int> gold = new List<int>();
        List<int> silver = new List<int>();
        List<int> bronze = new List<int>();
        List<int> mfe = new List<int>();
        List<int> other = new List<int>();
        _resultRoot.Results.Where(a => a.Member.Code == "JP").GroupBy(a => a.Skill.Event.Name).Select(a => new
        {
            Event = a.Key,
            Medals = a
        }).ToList().ForEach(@event =>
        {
            _config.Data.Labels.Add(@event.Event);
            gold.Add(@event.Medals.Count(a => a.Medal?.Code == "GOLD"));
            silver.Add(@event.Medals.Count(a => a.Medal?.Code == "SILVER"));
            bronze.Add(@event.Medals.Count(a => a.Medal?.Code == "BRONZE"));
            mfe.Add(@event.Medals.Count(a => a.Medal?.Code == "MFE"));
            other.Add(@event.Medals.Count(a => a.Medal is null));
        });
        IDataset<int> goldData = new BarDataset<int>(gold)
            {
                Label = "Gold",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gold)
            };

        IDataset<int> silverData = new BarDataset<int>(silver)
            {
                Label = "Silver",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Silver)
            };

        IDataset<int> bronzeData = new BarDataset<int>(bronze)
            {
                Label = "Bronze",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Brown)
            };
        IDataset<int> mfeData = new BarDataset<int>(mfe)
            {
                Label = "Medallion for Excellence",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Chocolate)
            };
        IDataset<int> otherData = new BarDataset<int>(other)
            {
                Label = "Other",
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gray)
            };
        _config.Data.Datasets.Add(goldData);
        _config.Data.Datasets.Add(silverData);
        _config.Data.Datasets.Add(bronzeData);
        _config.Data.Datasets.Add(mfeData);
        _config.Data.Datasets.Add(otherData);
        //IDataset<int> dataset1 = new BarDataset<int>(new int[] { 1, 2, 3, 4, 5 })
        //    {
        //        Label = "Dataset 1",
        //        BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red)
        //    };

        //IDataset<int> dataset2 = new BarDataset<int>(new int[] { 1, 2, 3, 4, 5 })
        //    {
        //        Label = "Dataset 2",
        //        BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue)
        //    };

        //IDataset<int> dataset3 = new BarDataset<int>(new int[] { 1, 2, 3, 4, 5 })
        //    {
        //        Label = "Dataset 3",
        //        BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Green)
        //    };
        //_config.Data.Labels.Add("data 1");
        //_config.Data.Labels.Add("data 2");
        //_config.Data.Labels.Add("data 3");
        //_config.Data.Labels.Add("data 4");
        //_config.Data.Labels.Add("data 5");
        //_config.Data.Datasets.Add(dataset1);
        //_config.Data.Datasets.Add(dataset2);
        //_config.Data.Datasets.Add(dataset3);
    }
}
