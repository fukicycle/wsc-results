@inject HttpClient _http
<div class="main-area">
    <div class="chart-area">
        <div class="chart-content">
            <div>Graph by competition in @_member</div>
            <div class="chart">
                <Chart Config="_barConfig1"></Chart>
            </div>
        </div>
        <div class="chart-content">
            <div>Graph by skill in @_member</div>
            <div class="chart">
                <Chart Config="_barConfig2"></Chart>
            </div>
        </div>
    </div>
    @if (ResultRoot is null)
    {
        <div class="loading">
            <div class="text-center">
                <div class="spinner-border"></div>
                <div>Getting data...</div>
            </div>
        </div>
    }
</div>

@code {
    private Root? _resultRoot;
    [Parameter]
    public Root? ResultRoot { get; set; }


    private BarConfig _barConfig1 = null!;
    private BarConfig _barConfig2 = null!;
    private string _member = "Japan";


    protected override void OnInitialized()
    {

        _barConfig1 = new BarConfig(true)
            {
                Options = new BarOptions
                {
                    AspectRatio = 0.6,
                    Responsive = true,
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Index,
                        Intersect = false
                    },
                    Scales = new BarScales
                    {
                        YAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true
                        }
                    },
                        XAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Stacked = true
                        }
                    }
                    }
                }
            };
        _barConfig2 = new BarConfig(true)
            {
                Options = new BarOptions
                {
                    AspectRatio = 0.3,
                    Responsive = true,
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Index,
                        Intersect = false
                    },
                    Scales = new BarScales
                    {
                        YAxes = new List<CartesianAxis>
                        {
                            new BarCategoryAxis
                            {
                                Stacked = true,
                                Ticks = new ChartJs.Blazor.Common.Axes.Ticks.CategoryTicks
                                {
                                    Display = true,
                                    AutoSkip = false,
                                }
                            }
                        },
                        XAxes = new List<CartesianAxis>
                        {
                            new BarLinearCartesianAxis
                            {
                                Stacked = true
                            }
                        }
                    }
                }
            };
    }

    protected override void OnParametersSet()
    {
        if (_resultRoot == ResultRoot) return;
        _resultRoot = ResultRoot;
        Refresh();
    }

    private void Refresh()
    {
        GetMemberName();
        CreateBarChart1();
        CreateBarChart2();
    }

    private void GetMemberName()
    {
        if (ResultRoot is not null)
        {
            _member = ResultRoot.Results.FirstOrDefault(a => a.Member is not null)?.Member?.Name?.Text ?? "";
        }
    }

    private void CreateBarChart1()
    {
        _barConfig1.Data.Datasets.Clear();
        _barConfig1.Data.Labels.Clear();
        List<int> gold = new List<int>();
        List<int> silver = new List<int>();
        List<int> bronze = new List<int>();
        List<int> mfe = new List<int>();
        List<int> other = new List<int>();
        if (ResultRoot is not null)
        {
            ResultRoot.Results.GroupBy(a => a.Skill.Event.Code).Select(a => new
            {
                Event = a.Key,
                Medals = a
            }).ToList().ForEach(@event =>
            {
                _barConfig1.Data.Labels.Add(@event.Event);
                gold.Add(@event.Medals.Count(a => a.Medal?.Code == "GOLD"));
                silver.Add(@event.Medals.Count(a => a.Medal?.Code == "SILVER"));
                bronze.Add(@event.Medals.Count(a => a.Medal?.Code == "BRONZE"));
                mfe.Add(@event.Medals.Count(a => a.Medal?.Code == "MFE"));
                other.Add(@event.Medals.Count(a => a.Medal is null || a.Medal.Code == null));
            });
            IDataset<int> goldData = new BarDataset<int>(gold, true)
                {
                    Label = "Gold",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gold)
                };

            IDataset<int> silverData = new BarDataset<int>(silver, true)
                {
                    Label = "Silver",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Silver)
                };

            IDataset<int> bronzeData = new BarDataset<int>(bronze, true)
                {
                    Label = "Bronze",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Brown)
                };
            IDataset<int> mfeData = new BarDataset<int>(mfe, true)
                {
                    Label = "Medallion for Excellence",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Chocolate)
                };
            IDataset<int> otherData = new BarDataset<int>(other, true)
                {
                    Label = "Other",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gray)
                };
            _barConfig1.Data.Datasets.Add(goldData);
            _barConfig1.Data.Datasets.Add(silverData);
            _barConfig1.Data.Datasets.Add(bronzeData);
            _barConfig1.Data.Datasets.Add(mfeData);
            _barConfig1.Data.Datasets.Add(otherData);
        }
    }

    private void CreateBarChart2()
    {
        _barConfig2.Data.Datasets.Clear();
        _barConfig2.Data.Labels.Clear();
        List<int> gold = new List<int>();
        List<int> silver = new List<int>();
        List<int> bronze = new List<int>();
        List<int> mfe = new List<int>();
        List<int> other = new List<int>();
        if (ResultRoot is not null)
        {
            ResultRoot.Results.GroupBy(a => a.Skill.Name.Text).Select(a => new
            {
                Skill = a.Key,
                Medals = a
            }).ToList().ForEach(skill =>
            {
                _barConfig2.Data.Labels.Add(skill.Skill);
                gold.Add(skill.Medals.Count(a => a.Medal?.Code == "GOLD"));
                silver.Add(skill.Medals.Count(a => a.Medal?.Code == "SILVER"));
                bronze.Add(skill.Medals.Count(a => a.Medal?.Code == "BRONZE"));
                mfe.Add(skill.Medals.Count(a => a.Medal?.Code == "MFE"));
                other.Add(skill.Medals.Count(a => a.Medal is null || a.Medal.Code == null));
            });
            IDataset<int> goldData = new BarDataset<int>(gold, true)
                {
                    Label = "Gold",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gold)
                };

            IDataset<int> silverData = new BarDataset<int>(silver, true)
                {
                    Label = "Silver",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Silver)
                };

            IDataset<int> bronzeData = new BarDataset<int>(bronze, true)
                {
                    Label = "Bronze",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Brown)
                };
            IDataset<int> mfeData = new BarDataset<int>(mfe, true)
                {
                    Label = "Medallion for Excellence",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Chocolate)
                };
            IDataset<int> otherData = new BarDataset<int>(other, true)
                {
                    Label = "Other",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gray)
                };
            _barConfig2.Data.Datasets.Add(goldData);
            _barConfig2.Data.Datasets.Add(silverData);
            _barConfig2.Data.Datasets.Add(bronzeData);
            _barConfig2.Data.Datasets.Add(mfeData);
            _barConfig2.Data.Datasets.Add(otherData);
        }
    }
}
