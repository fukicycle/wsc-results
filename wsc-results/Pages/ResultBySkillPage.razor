<div class="main-area">
    @if (ResultRoot is not null)
    {
        <div class="chart-area">
            <div class="chart-content">
                <div>Graph by country in @_skill</div>
                <div class="chart">
                    <Chart Config="_barConfig1"></Chart>
                </div>
            </div>
            <div class="chart-content">
                <div>Graph by skill in @_skill</div>
                <div class="chart">
                    <Chart Config="_barConfig2"></Chart>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="loading">
            <div class="text-center">
                <div class="spinner-border"></div>
                <div>Getting data...</div>
            </div>
        </div>
    }
</div>

@code {
    private Root? _resultRoot;
    [Parameter]
    public Root? ResultRoot { get; set; }

    private BarConfig _barConfig1 = null!;
    private BarConfig _barConfig2 = null!;
    private string _skill = "";

    protected override void OnInitialized()
    {
        _barConfig1 = new BarConfig(true)
            {
                Options = new BarOptions
                {
                    AspectRatio = 0.5,
                    Responsive = true,
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Index,
                        Intersect = false
                    },
                    Scales = new BarScales
                    {
                        YAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            Stacked = true,
                            Ticks = new ChartJs.Blazor.Common.Axes.Ticks.CategoryTicks
                                {
                                    Display = true,
                                    AutoSkip = false,
                                }
                        }
                    },
                        XAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Stacked = true
                        }
                    }
                    }
                }
            };
        _barConfig2 = new BarConfig(true)
            {
                Options = new BarOptions
                {
                    AspectRatio = 0.5,
                    Responsive = true,
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Index,
                        Intersect = false
                    },
                    Scales = new BarScales
                    {
                        YAxes = new List<CartesianAxis>
                        {
                            new BarCategoryAxis
                            {
                                Ticks = new ChartJs.Blazor.Common.Axes.Ticks.CategoryTicks
                                {
                                    Display = true,
                                    AutoSkip = false,
                                }
                            }
                        }
                    }
                }
            };
    }

    protected override void OnParametersSet()
    {
        if (_resultRoot == ResultRoot) return;
        _resultRoot = ResultRoot;
        Refresh();
    }

    private void Refresh()
    {
        GetSkillName();
        CreateBarChart1();
        CreateBarChart2();
    }

    private void GetSkillName()
    {
        if (ResultRoot is not null)
        {
            _skill = ResultRoot.Results.FirstOrDefault(a => a.Skill is not null)?.Skill?.Name?.Text ?? "";
        }
    }

    private void CreateBarChart1()
    {
        _barConfig1.Data.Datasets.Clear();
        _barConfig1.Data.Labels.Clear();
        if (ResultRoot is not null)
        {
            List<int> gold = new List<int>();
            List<int> silver = new List<int>();
            List<int> bronze = new List<int>();
            List<int> mfe = new List<int>();
            List<int> other = new List<int>();
            Dictionary<string, int> allPoints = new Dictionary<string, int>();
            List<(string, int, int)> goldPoints = new List<(string, int, int)>();
            List<(string, int, int)> silverPoints = new List<(string, int, int)>();
            List<(string, int, int)> bronzePoints = new List<(string, int, int)>();
            List<(string, int, int)> mfePoints = new List<(string, int, int)>();
            List<(string, int, int)> otherPoints = new List<(string, int, int)>();
            ResultRoot.Results.GroupBy(a => a.Member.Name.Text).OrderBy(a => a.Key).ToList().ForEach(country =>
            {
                //_barConfig1.Data.Labels.Add(country.Key);
                //gold.Add(country.Count(a => a.Medal?.Code == "GOLD"));
                //silver.Add(country.Count(a => a.Medal?.Code == "SILVER"));
                //bronze.Add(country.Count(a => a.Medal?.Code == "BRONZE"));
                //mfe.Add(country.Count(a => a.Medal?.Code == "MFE"));
                //other.Add(country.Count(a => a.Medal is null || a.Medal.Code == null));
                int result = country.Where(a => a.Medal?.Code == "GOLD").Select(a => 4).Sum()
                            + country.Where(a => a.Medal?.Code == "SILVER").Select(a => 3).Sum()
                            + country.Where(a => a.Medal?.Code == "BRONZE").Select(a => 2).Sum()
                            + country.Where(a => a.Medal?.Code == "MFE").Select(a => 1).Sum();
                goldPoints.Add((country.Key, country.Count(a => a.Medal?.Code == "GOLD"), result));
                silverPoints.Add((country.Key, country.Count(a => a.Medal?.Code == "SILVER"), result));
                bronzePoints.Add((country.Key, country.Count(a => a.Medal?.Code == "BRONZE"), result));
                mfePoints.Add((country.Key, country.Count(a => a.Medal?.Code == "MFE"), result));
                otherPoints.Add((country.Key, country.Count(a => a.Medal?.Code is null || a.Medal is null), result));
                allPoints.Add(country.Key, result);
            });
            allPoints.OrderByDescending(a => a.Value).Select(a => a.Key).ToList().ForEach(a => _barConfig1.Data.Labels.Add(a));
            IDataset<int> goldData = new BarDataset<int>(goldPoints.OrderByDescending(a => a.Item3).Select(a => a.Item2), true)
                {
                    Label = "Gold",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gold)
                };

            IDataset<int> silverData = new BarDataset<int>(silverPoints.OrderByDescending(a => a.Item3).Select(a => a.Item2), true)
                {
                    Label = "Silver",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Silver)
                };

            IDataset<int> bronzeData = new BarDataset<int>(bronzePoints.OrderByDescending(a => a.Item3).Select(a => a.Item2), true)
                {
                    Label = "Bronze",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Brown)
                };
            IDataset<int> mfeData = new BarDataset<int>(mfePoints.OrderByDescending(a => a.Item3).Select(a => a.Item2), true)
                {
                    Label = "Medallion for Excellence",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Chocolate)
                };
            IDataset<int> otherData = new BarDataset<int>(otherPoints.OrderByDescending(a => a.Item3).Select(a => a.Item2), true)
                {
                    Label = "Other",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Gray)
                };
            _barConfig1.Data.Datasets.Add(goldData);
            _barConfig1.Data.Datasets.Add(silverData);
            _barConfig1.Data.Datasets.Add(bronzeData);
            _barConfig1.Data.Datasets.Add(mfeData);
            _barConfig1.Data.Datasets.Add(otherData);
        }
    }

    private System.Drawing.Color GetColor(string code)
    {
        switch (code.ToUpper())
        {
            case "GOLD":
                return System.Drawing.Color.Gold;
            case "SILVER":
                return System.Drawing.Color.Silver;
            case "BRONZE":
                return System.Drawing.Color.Brown;
            case "MFE":
                return System.Drawing.Color.Chocolate;
            default:
                return System.Drawing.Color.Gray;

        }
    }

    private void CreateBarChart2()
    {
        _barConfig2.Data.Datasets.Clear();
        _barConfig2.Data.Labels.Clear();
        if (ResultRoot is not null)
        {
            Dictionary<string, int> points = new Dictionary<string, int>();
            ResultRoot.Results.GroupBy(a => a.Member.Name.Text).OrderBy(a => a.Key).ToList().ForEach(country =>
            {
                int result = country.Where(a => a.Medal?.Code == "GOLD").Select(a => 4).Sum()
                + country.Where(a => a.Medal?.Code == "SILVER").Select(a => 3).Sum()
                + country.Where(a => a.Medal?.Code == "BRONZE").Select(a => 2).Sum()
                + country.Where(a => a.Medal?.Code == "MFE").Select(a => 1).Sum();
                points.Add(country.Key, result);
            });
            IDataset<int> pointData = new BarDataset<int>(points.OrderByDescending(a => a.Value).Select(a => a.Value), true)
                {
                    Label = "Points",
                    BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.DeepSkyBlue)
                };
            points.OrderByDescending(a => a.Value).ToList().ForEach(a => _barConfig2.Data.Labels.Add(a.Key));
            _barConfig2.Data.Datasets.Add(pointData);
        }
    }
}
